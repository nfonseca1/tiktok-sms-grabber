<!DOCTYPE html>
<html>
    <head>
        <title></title>
        <style>
            .post-content {
                display: flex;
                justify-content: center;
                width: 100%;
            }
            .post {
                display: inline-block;
                width: 40vw;
                height: 783px;
            }
            blockquote {
                height: 705px;
            }
            .social-box {
                display: inline-block;
                border: 1px solid gray;
                width: 25vw;
                height: 700px;
                margin: 20px 0 0 3%;
            }
            .ratings {
                display: flex;
                width: 100%;
                height: 10%;
                border-bottom: 1px solid gray;
            }
            .message-list {
                display: block;
                width: 100%;
                height: 86%;
                overflow: scroll;
                scrollbar-width: none; /* Firefox */
                -ms-overflow-style: none;  /* IE 10+ */
            }
            ::-webkit-scrollbar {
                width: 0px;
                background: transparent;
            }
            .message {
                display: block;
            }
            .your-message {
                padding: 15px 0px 5px 25%;
            }
            .their-message {
                padding: 15px 25% 5px 0;
            }
            .message-text {
                border: 1px solid gray;
            }
            .their-message .message-text {
                border-radius: 0 5px 5px 0;
                background-color: #cacaca;
            }
            .your-message .message-text {
                border-radius: 5px 0 0 5px;
                background-color: #81bcff;
            }
            .message-input {
                display: flex;
                width: 100%;
                height: 4%;
                border-top: 1px solid gray;
            }
            .message-input input {
                height: 80%;
                width: 75%;
                padding: 0 0 0 2%;
            }
            .message-input button {
                height: 95%;
                width: 24%;
            }
        </style>
    </head>
    <body>
        <p class="error"></p>
        <input type="text" placeholder="Contact to search" id="contact">
        is 
        <input type="text" placeholder="Contact username (optional)" id="username">
        <button id="add-contact-btn">Add contact</button>
        <br>
        <select id="contacts-list">
            <option value="" selected="selected">Select Contact</option>
            <% for (let contact of contacts) {%>
                <option value="<%= contact.contactName %>-<%= contact.username %>"><%= contact.contactName %> as <%= contact.username %></option>
            <% } %>
        </select>
        <button id="search-posts-btn" style="visibility: hidden;">Search Conversation</button>
        <div class="content">
            
        </div>
        <script>
            let error = document.querySelector(".error");
            let contact = document.querySelector("#contact");
            let username = document.querySelector("#username");
            let addContactBtn = document.querySelector("#add-contact-btn");
            let contactsList = document.querySelector("#contacts-list");
            let searchPostsBtn = document.querySelector("#search-posts-btn");
            let content = document.querySelector(".content");
            let postIndex = 0;
            let myUser = "";

            addContactBtn.addEventListener("click", async () => {
                error.textContent = "";
                if (contact.value === "") {
                    error.textContent = "Contact cannot be blank";
                    return;
                }
                let response = await fetch("/contacts", {
                    method: "POST",
                    headers: {
                        'Content-type': 'application/json'
                    },
                    body: JSON.stringify({contact: contact.value, username: username.value})
                })
                let data = await response.json();
                let option = document.createElement("option");
                option.innerHTML = 
                    `<option value=${data.username}>${data.contactName} as ${data.username}</option>`;
                contactsList.appendChild(option);
            })

            contactsList.addEventListener("change", async () => {
                if (contactsList.value === "") return;
                let response = await fetch("/posts?username=" + contactsList.value);
                let data = await response.json();
                postIndex = 0;
                myUser = data.user.username;
                if (data.results) {
                    // For every post, create the necessary html
                    for (let i = postIndex; i < data.results.posts.length; i++) {
                        createPost(data.results.posts, i);
                    }
                    postIndex = data.results.posts.length;
                }
                searchPostsBtn.style.visibility = "visible";
            })

            searchPostsBtn.addEventListener("click", async () => {
                let response = await fetch("/posts", {
                    method: "POST",
                    headers: {
                        "Content-type": "application/json"
                    },
                    body: JSON.stringify({contact: contactsList.value})
                })
                let data = await response.json();
                if (data.authenticate) {
                    content.innerHTML = "<img src='/qr.png'>";
                }
                if (window.interval) clearInterval(window.interval);
                window.interval = setInterval(() => {
                    checkStatus();
                }, 5000)
            })

            async function checkStatus() {
                let response = await fetch("/status");
                let data = await response.json();
                // For every post, create the necessary html
                for (let i = postIndex; i < data.posts.length; i++) {
                    createPost(data.posts, i);
                }
                // Keep track of last index of posts to check
                postIndex = data.posts.length;
                if (data.finishedLoading) clearInterval(window.interval);
            }

            async function createPost(posts, i) {
                let div = document.createElement("div");
                div.classList.add("post");
                div.innerHTML = posts[i].html;
                let script = document.createElement("script");
                let src = document.createAttribute("src");
                src.value = "https://www.tiktok.com/embed.js";
                script.setAttributeNode(src);
                div.appendChild(script);
                // Social box
                let comments = document.createElement("div");
                comments.classList.add("social-box");
                // Ratings sections
                let ratings = document.createElement("div");
                ratings.classList.add("ratings");
                comments.appendChild(ratings);
                // Message list
                let messageList = document.createElement("div");
                messageList.classList.add("message-list");
                comments.appendChild(messageList);
                // New message input
                let messageInput = document.createElement("div");
                messageInput.classList.add("message-input");
                comments.appendChild(messageInput);
                let input = document.createElement("input");
                input.setAttribute("type", "text");
                input.setAttribute("placeholder", "New comment");
                input.classList.add("msg-input");
                messageInput.appendChild(input);
                let button = document.createElement("button");

                // Add comments to comment list
                for (let comment of posts[i].comments){
                    let newComment = document.createElement("div");
                    let authorClass = comment.author === myUser ? "your-message" : "their-message";
                    messageList.appendChild(newComment);
                    newComment.outerHTML = `
                    <div class="message ${authorClass}">
                        <div class="message-text">
                            ${comment.text}
                        </div>
                    </div>
                    `;
                }
                
                // Add new comment
                button.addEventListener("click", function() {
                    addComment(posts[i], input, messageList);
                })

                button.classList.add("msg-send-btn");
                button.textContent = "Send";
                messageInput.appendChild(button);

                let contentPost = document.createElement("div");
                contentPost.classList.add("post-content");
                contentPost.appendChild(div);
                contentPost.appendChild(comments);
                content.appendChild(contentPost);
            }

            async function addComment(data, input, messageList) {
                let response = await fetch("/comments", {
                    method: "post",
                    headers: {
                        "Content-type": "application/json"
                    },
                    body: JSON.stringify({postId: data.id, commentText: input.value})
                })
                let commentResult = await response.json();
                if (commentResult.success) {
                    let newComment = document.createElement("div");
                    messageList.appendChild(newComment);
                    newComment.outerHTML = `
                    <div class="message your-message">
                        <div class="message-text">
                            ${input.value}
                        </div>
                    </div>
                    `;
                }
            }
        </script>
    </body>
</html>